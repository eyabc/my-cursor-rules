---
description: 
globs: 
alwaysApply: true
---
---
description: JavaScript/TypeScript TDD 특화 룰 - Jest, Mocha, Vitest 지원
globs: **/*.{js,ts,jsx,tsx}
---

# JavaScript/TypeScript TDD 개발 룰

## 테스트 파일 명명 규칙
- 테스트 파일은 반드시 `.test.js`, `.test.ts`, `.spec.js`, `.spec.ts` 확장자 사용
- 테스트 파일은 대상 파일과 같은 디렉토리 또는 `__tests__` 폴더에 위치

## Jest/Vitest 테스트 구조
```
describe('기능명', () => {
beforeEach(() => {
// 각 테스트 전 초기화
});

it('should 구체적인_기대_결과', () => {
// Given (준비)
const input = 준비_데이터;

// When (실행)
const result = 테스트_대상_함수(input);

// Then (검증)
expect(result).toBe(기대_값);
});
});
```


## Mocha 테스트 구조 (search result 참조)
```
const { expect } = require('chai');

describe('add', () => {
it('should return the sum of two numbers', () => {
expect(add(2, 3)).to.equal(5);
});
});
```

## TDD 사이클 적용
1. Red: 실패하는 테스트 작성
2. Green: 테스트 통과를 위한 최소 구현
3. Refactor: 코드 구조 개선

## 테스트 커버리지 요구사항
- 새로운 함수/메서드는 최소 95% 라인 커버리지 유지
- 엣지 케이스와 에러 상황 테스트 포함 필수





