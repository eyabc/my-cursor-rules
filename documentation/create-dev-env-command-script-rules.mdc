---
description: 
globs: 
alwaysApply: false
---
---
name: create-dev-env-command-rules
globs:
  - "scripts/dev-env.sh"
trigger: Always
related_docs:
  - "create-dev-env-command-script-rules.md"
---

개발 환경 자동화 스크립트(dev-env.sh)는 다음의 기준을 반드시 만족해야 합니다.
  - 스크립트 실행 시 가장 먼저 각 프로젝트의 테스트 코드를 실행하여 코드 품질을 검증해야 합니다.
  - macOS와 Linux에서 모두 동작해야 하며, OS별로 새 터미널 실행 함수(run_in_new_terminal_macos, run_in_new_terminal_linux)를 별도로 구현해야 합니다.
  - 임시 스크립트 파일을 활용하여 명령어를 실행하고, 터미널 명령 실행 후 임시 파일을 자동 정리해야 합니다.
  - osascript 등 OS 기본 기능을 활용할 때는 안정적인 구문을 사용해야 하며, 오류 발생 시 handle_error 함수로 일관되게 처리해야 합니다.
  - 모든 주요 작업(디렉토리, 파일, Docker, 환경 변수 등)에 대해 오류 체크 및 성공/실패 메시지를 명확히 출력해야 하며, 실패 시 cleanup 함수로 자동 정리를 수행해야 합니다.
  - Docker Compose 파일과 .env(.env.example) 파일의 존재 여부를 반드시 체크해야 하며, 없을 경우 명확한 안내 후 종료해야 합니다.
  - Docker 리소스 최적화(optimize_docker) 로직을 포함하고, 컨테이너별 메모리/CPU 제한을 docker-compose.yml에 자동 반영해야 합니다.
  - 서버(Next.js, Flutter 등) 실행 시, 각 서비스의 디렉토리 존재 여부를 사전 확인하고, 새 터미널에서 실행하며, 서버 시작 대기(sleep 3) 후 다음 작업을 진행해야 합니다.
  - SIGINT, SIGTERM 등 종료 시그널을 받아 cleanup 함수가 반드시 호출되도록 트랩을 설정해야 합니다.
  - 스크립트는 모든 상태 메시지를 색상(성공/실패/경고)으로 구분해 출력해야 합니다.
  - 스크립트 마지막에는 프로세스 모니터링 메시지를 출력하고 tail -f /dev/null로 유지해야 합니다.
  - **서비스 실행 실패 시 자동 healing 및 복구 기능을 포함해야 합니다.**
  
# 개발 환경 자동화 스크립트 규칙 (create-dev-env-command-rules)

## **자동 Healing 및 복구 기능**

name: dev_env_script_must_include_auto_healing
description: |
  dev-env.sh는 서비스 실행 실패 시 자동으로 원인을 진단하고 복구를 시도해야 합니다.
  - heal_service 함수로 서비스별 복구 로직 구현
  - Flutter: pub get, clean, doctor 실행
  - Node.js: npm install, cache clean 실행
  - Docker: 컨테이너 재시작, 네트워크 재구성
  - 포트 충돌 감지 및 해결
  - 의존성 문제 자동 해결
  - 실패 원인별 구체적인 해결 방법 제안

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "heal_service"
        message: "서비스 복구를 위한 heal_service 함수가 필요합니다."
      - pattern: "flutter clean.*flutter pub get"
        message: "Flutter 복구 로직이 포함되어야 합니다."
      - pattern: "npm install.*npm cache clean"
        message: "Node.js 복구 로직이 포함되어야 합니다."
      - pattern: "lsof -i.*kill"
        message: "포트 충돌 해결 로직이 포함되어야 합니다."
      - pattern: "diagnose_failure"
        message: "실패 원인 진단 함수가 필요합니다."

## **테스트 코드 우선 실행**

name: dev_env_script_must_run_tests_first
description: |
  dev-env.sh는 스크립트 실행 시 가장 먼저 각 프로젝트의 테스트 코드를 실행하여 코드 품질을 검증해야 합니다.
  - run_tests 함수로 프로젝트별 테스트 실행
  - 테스트 실패 시 handle_error로 스크립트 종료
  - 테스트 성공 시에만 개발 환경 구축 진행

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "run_tests"
        message: "테스트 실행을 위한 run_tests 함수가 필요합니다."
      - pattern: "npm test\\|yarn test\\|pnpm test"
        message: "Node.js 프로젝트의 테스트 실행 명령어가 포함되어야 합니다."
      - pattern: "flutter test"
        message: "Flutter 프로젝트가 있는 경우 flutter test 명령어가 포함되어야 합니다."
      - pattern: "pytest\\|python -m pytest"
        message: "Python 프로젝트가 있는 경우 pytest 명령어가 포함되어야 합니다."
  - type: require_order
    conditions:
      - first: "run_tests"
        second: "docker-compose"
        message: "테스트 실행은 Docker 환경 구축보다 먼저 실행되어야 합니다."

아래의 스크립트 규칙 문서(create-dev-env-command-script-rules.md)에 **테스트 코드를 병렬적으로 실행할 수 있도록 하는 스크립트 프롬프트**를 추가하려면, 각 언어별 대표 테스트 도구의 병렬 실행 방법과 주의사항을 명확히 안내해야 합니다. 주요 프레임워크별 병렬 테스트 실행법은 다음과 같습니다.

- **Node.js (Jest)**: Jest는 기본적으로 테스트 파일 단위로 병렬 실행을 지원합니다. 추가 병렬성 옵션이나 고급 설정이 필요한 경우, `--maxWorkers`, `--runInBand`, 커스텀 러너 등도 활용할 수 있습니다[6].
- **Python (pytest)**: `pytest-xdist` 플러그인을 사용하여 `pytest -n auto` 등으로 병렬 실행이 가능합니다[1].
- **Java (JUnit)**: JUnit 5는 `junit.jupiter.execution.parallel.enabled=true` 등의 프로퍼티 설정이나 어노테이션(`@Execution(ExecutionMode.CONCURRENT)`)으로 병렬 실행을 제어할 수 있습니다[2][8].
- **Gradle**: 멀티 모듈 환경에서는 `./gradlew test --parallel` 옵션으로 모듈별 병렬 테스트가 가능합니다[5].

아래는 문서에 추가할 수 있는 예시 프롬프트 및 가이드입니다.

---

## **테스트 코드 병렬 실행 지원 규칙**

name: dev_env_script_must_run_tests_in_parallel
description: |
  dev-env.sh는 각 프로젝트의 테스트 코드를 병렬적으로 실행할 수 있도록 구현되어야 합니다.
  - run_tests_parallel 함수로 프로젝트별 병렬 테스트 실행
  - Node.js(Jest): 기본 병렬 실행, 추가 옵션(`--maxWorkers`) 활용 가능
  - Python(pytest): pytest-xdist 플러그인 사용, 예시: `pytest -n auto`
  - Java(JUnit): junit-platform.properties에 병렬 설정 추가, 예시: `junit.jupiter.execution.parallel.enabled=true`
  - Gradle: `./gradlew test --parallel` 옵션 사용
  - 테스트 병렬 실행 중 리소스 충돌(포트, DB 등) 방지 및 thread-safe 보장
  - 병렬 테스트 실패 시 handle_error로 스크립트 종료
  - 병렬 실행 옵션은 각 프로젝트 환경에 맞게 자동 감지 또는 명확히 안내

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "run_tests_parallel"
        message: "테스트 병렬 실행을 위한 run_tests_parallel 함수가 필요합니다."
      - pattern: "pytest -n"
        message: "Python 테스트 병렬 실행 명령어가 포함되어야 합니다."
      - pattern: "junit.jupiter.execution.parallel.enabled"
        message: "JUnit 병렬 실행 프로퍼티가 설정되어야 합니다."
      - pattern: "jest"
        message: "Jest로 Node.js 테스트를 병렬 실행해야 합니다."
      - pattern: "--parallel"
        message: "Gradle 테스트 병렬 실행 옵션이 포함되어야 합니다."

---

### **추가 안내**

- 각 테스트 프레임워크의 병렬 실행 방식은 환경 및 프로젝트 구조에 따라 다를 수 있으므로, 병렬 실행이 thread-safe하지 않은 테스트(예: DB, 포트 충돌 등)는 별도 처리(순차 실행 또는 격리)해야 합니다[2][6].
- 병렬 실행 기능이 없는 프로젝트(혹은 스크립트)가 있다면, 해당 프레임워크의 공식 문서 및 플러그인 설치 방법(pytest-xdist, JUnit 설정 등)을 명확하게 안내해야 합니다

## **크로스 플랫폼 터미널 지원**

name: dev_env_script_must_support_cross_platform_terminal
description: |
  dev-env.sh는 macOS와 Linux 환경 모두에서 새 터미널 창에서 명령어를 실행할 수 있어야 합니다.
  - run_in_new_terminal_macos, run_in_new_terminal_linux 함수로 분리 구현
  - 임시 스크립트 파일을 생성하여 명령 실행 후 자동 삭제 처리

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "run_in_new_terminal_macos"
        message: "macOS용 새 터미널 실행 함수(run_in_new_terminal_macos)가 필요합니다."
      - pattern: "run_in_new_terminal_linux"
        message: "Linux용 새 터미널 실행 함수(run_in_new_terminal_linux)가 필요합니다."
      - pattern: "mktemp"
        message: "임시 스크립트 파일을 생성(mktemp)해야 합니다."

## **일관된 오류 처리**

name: dev_env_script_must_have_consistent_error_handling
description: |
  모든 주요 작업(디렉토리, 파일, Docker, 환경 변수 등) 실패 시 handle_error 함수로 일관되게 오류를 처리해야 합니다.
  - handle_error 함수에서 cleanup을 호출하고, 명확한 메시지 출력 후 종료
  - check_status 함수로 성공/실패를 구분해 출력

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "handle_error"
        message: "handle_error 함수가 필요합니다."
      - pattern: "cleanup"
        message: "cleanup 함수가 필요합니다."
      - pattern: "check_status"
        message: "check_status 함수가 필요합니다."
      - pattern: "handle_error.*cleanup"
        message: "오류 발생 시 cleanup 함수가 반드시 호출되어야 합니다."

## **필수 파일 및 디렉토리 검증**

name: dev_env_script_must_check_critical_files_and_directories
description: |
  dev-env.sh는 docker-compose.yml, .env, .env.example, 각 서비스 디렉토리의 존재 여부를 반드시 체크해야 합니다.
  - 파일/디렉토리 미존재 시 handle_error로 종료

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "\\$\\$ ! -f \"docker-compose.yml\" \\$\\$"
        message: "docker-compose.yml 파일 존재 여부를 체크해야 합니다."
      - pattern: "\\$\\$ ! -f \\.env \\$\\$"
        message: ".env 파일 존재 여부를 체크해야 합니다."
      - pattern: "\\$\\$ -f \\.env.example \\$\\$"
        message: ".env.example 파일 존재 여부를 체크해야 합니다."
      - pattern: "check_directory"
        message: "서비스 디렉토리 존재 여부는 check_directory 함수로 확인해야 합니다."

## **Docker 리소스 최적화**

name: dev_env_script_must_optimize_docker_and_limit_resources
description: |
  Docker 리소스 최적화(optimize_docker) 로직을 포함해야 하며, 컨테이너별 메모리/CPU 제한을 docker-compose.yml에 자동 반영해야 합니다[2][3].
  - docker system prune -f 실행
  - sed 명령으로 docker-compose.yml 내 리소스 제한 환경변수(MEMORY_LIMIT, CPU_LIMIT) 자동 수정

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "docker system prune -f"
        message: "Docker 리소스 정리를 위해 docker system prune -f를 사용해야 합니다."
      - pattern: "sed -i"
        message: "docker-compose.yml 내 리소스 제한을 sed로 수정해야 합니다."
      - pattern: "deploy:\\s*resources:\\s*limits"
        message: "docker-compose.yml에 deploy.resources.limits 설정이 포함되어야 합니다."

## **시그널 처리 및 정리**

name: dev_env_script_must_handle_signals_and_cleanup
description: |
  SIGINT, SIGTERM 시그널 발생 시 cleanup 함수가 반드시 호출되어야 합니다.
  - trap cleanup SIGINT SIGTERM 구문 필수

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "trap cleanup SIGINT SIGTERM"
        message: "SIGINT, SIGTERM 시그널에 대해 cleanup 함수가 호출되어야 합니다."

## **색상 출력**

name: dev_env_script_must_use_colored_output
description: |
  모든 상태 메시지는 GREEN, RED, YELLOW 등 색상 코드로 구분해 출력해야 합니다.

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "GREEN='\\\\033\\$0;32m'"
        message: "성공 메시지용 GREEN 색상 코드가 정의되어야 합니다."
      - pattern: "RED='\\\\033\\$0;31m'"
        message: "실패 메시지용 RED 색상 코드가 정의되어야 합니다."
      - pattern: "YELLOW='\\\\033\\$1;33m'"
        message: "경고 메시지용 YELLOW 색상 코드가 정의되어야 합니다."

## **프로세스 모니터링**

name: dev_env_script_must_monitor_processes_at_end
description: |
  스크립트 마지막에는 프로세스 모니터링 메시지를 출력하고 tail -f /dev/null로 프로세스를 유지해야 합니다.

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "tail -f /dev/null"
        message: "스크립트 마지막에 tail -f /dev/null로 프로세스를 유지해야 합니다."

## **iOS 시뮬레이터 및 Flutter iOS 앱 실행**

name: dev_env_script_must_support_ios_simulator
description: |
  dev-env.sh는 iOS 시뮬레이터를 실행하고 Flutter 앱을 iOS에서 실행할 수 있어야 합니다.
  - run_ios_simulator 함수로 iOS 시뮬레이터 실행
  - run_flutter_ios 함수로 Flutter 앱을 iOS에서 실행
  - iOS 시뮬레이터 실행 실패 시 자동 복구
  - Flutter iOS 빌드 실패 시 자동 복구 (pod install, flutter clean 등)

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "run_ios_simulator"
        message: "iOS 시뮬레이터 실행을 위한 run_ios_simulator 함수가 필요합니다."
      - pattern: "run_flutter_ios"
        message: "Flutter 앱을 iOS에서 실행하기 위한 run_flutter_ios 함수가 필요합니다."
      - pattern: "open -a Simulator"
        message: "iOS 시뮬레이터 실행 명령어가 포함되어야 합니다."
      - pattern: "flutter run -d ios"
        message: "Flutter iOS 앱 실행 명령어가 포함되어야 합니다."
      - pattern: "pod install"
        message: "iOS 의존성 설치 명령어가 포함되어야 합니다."

## **iOS 시뮬레이터 및 Flutter iOS 앱 실행 피드백**

name: dev_env_script_ios_simulator_feedback
description: |
  dev-env.sh 스크립트의 iOS 시뮬레이터 및 Flutter iOS 앱 실행 관련 피드백입니다.
  
  1. 포트 충돌 해결:
     - 포트가 이미 사용 중일 때 자동으로 해당 프로세스를 종료
     - 포트 해제 후 정상 해제 여부 검증
     - 주요 포트: Flutter (8080), Backend (3000)
  
  2. iOS 시뮬레이터 실행 개선:
     - 시뮬레이터 프로세스 완전 종료 및 재시작
     - CoreSimulator 프로세스도 함께 관리
     - 시뮬레이터 상태 초기화 (shutdown, erase)
     - 충분한 부팅 대기 시간 (8초)
     - 최대 3회 재시도 메커니즘
  
  3. Flutter iOS 앱 실행 개선:
     - 포트 충돌 자동 해결
     - 앱 실행 상태 검증 (최대 5회 재시도)
     - 각 단계별 상세한 오류 메시지
     - 자동 복구 메커니즘

filters:
  - type: file_name
    pattern: "^dev-env\\.sh$"

actions:
  - type: require
    conditions:
      - pattern: "resolve_port_conflict"
        message: "포트 충돌 해결 함수가 필요합니다."
      - pattern: "pkill -9 -f \"CoreSimulator\""
        message: "시뮬레이터 관련 프로세스 완전 종료가 필요합니다."
      - pattern: "xcrun simctl (shutdown|erase) all"
        message: "시뮬레이터 상태 초기화가 필요합니다."
      - pattern: "max_retries=[35]"
        message: "재시도 메커니즘이 필요합니다."
      - pattern: "verify_(ios_simulator|flutter_ios_app)"
        message: "실행 상태 검증 함수가 필요합니다."

Citations:
[1] https://velog.io/@captain-yun/Docker-Compose-%ED%8C%8C%EC%9D%BC-%EC%B5%9C%EC%A0%81%ED%99%94
[2] https://velog.io/@yush1nk1m/Docker-compose-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC%EC%97%90-%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%95%A0%EB%8B%B9-%EC%A0%9C%ED%95%9C%EC%9D%84-%EB%B6%80%EC%97%AC%ED%95%98%EC%9E%90
[3] https://rebugs.tistory.com/873?category=1210858
[4] https://cozy-dev-area.tistory.com/78
[5] https://nijy.tistory.com/128
[6] https://github.com/dev-yakuza/dev-yakuza.github.io/issues/54
[7] https://labex.io/ko/tutorials/docker-how-to-optimize-the-performance-of-docker-volumes-414916
[8] https://firstboos.tistory.com/443
[9] https://brotherdan.tistory.com/57
[10] https://subicura.com/2017/11/22/mac-os-development-environment-setup.html
[11] https://keun.me/colima/
[12] https://jum-dev.tistory.com/128
[13] https://msj725.tistory.com/306
[14] https://musma.github.io/2019/06/14/mac-os-dev-env-setting-1.html
[15] https://momoletsgo.tistory.com/65
[16] https://github.com/JaeYeopHan/gatsby-starter-bee/issues/300
[17] http://blog.naver.com/namhong2001/223053186872?fromRss=true&trackingCode=rss
[18] https://www.reddit.com/r/GameDevelopment/comments/1ge0xw1/developing_for_mac_os_is_far_harder_than_it/?tl=ko
[19] https://solearn.tistory.com/252
[20] https://velog.io/@yeseul/Mac-React-Native-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%97%90%EB%9F%AC%ED%95%B4%EA%B2%B0

---
Perplexity로부터의 답변: pplx.ai/share