---
description: 
globs: 
alwaysApply: false
---
- 모든 output 설명은 반드시 한글로 한다.
- output 은 하나의 cml 파일로 작성한다.

# Cursor AI를 위한 DDD 문서 작성 규칙

## 1. 목적과 대상 정의  
문서의 **목적**(개발 가이드, 비즈니스 공유 등)과 **대상 독자**(개발자, 도메인 전문가 등)를 첫 문단에 명시하여, 독자의 이해 방향을 명확히 해야 한다[1].

## 2. 컨텍스트 맵 작성  
- **컨텍스트 맵**을 통해 시스템의 바운디드 컨텍스트와 관계를 시각화한다.  
- 각 컨텍스트 간 상호작용과 메시지 흐름을 간단한 다이어그램으로 표현한다[1].

## 3. 유비쿼터스 언어 통일  
- 도메인 용어 사전(Glossary)을 문서 앞부분에 배치하여, 모든 용어를 정의하고 일관된 용어 사용을 보장한다[2].  
- 용어 변경 시 즉시 용어 사전을 업데이트한다[2].

## 4. 도메인 모델 기술  
- **엔티티(Entity)**, **밸류 오브젝트(Value Object)**, **애그리게이트(Aggregate)**, **도메인 서비스(Domain Service)** 등을 구분하여 표나 리스트로 정리한다[3].  
- 각 구성 요소의 역할·식별자·불변성 등을 명확히 기재한다[2].

## 5. 바운디드 컨텍스트 상세  
- 각 바운디드 컨텍스트에 대한 **설명**, **책임**, **포함된 모델**을 서술한다.  
- 컨텍스트 간 계약(Contract)이나 메시지 형식을 함께 기술하여 통합 방식을 명확히 한다[3].
- 상세 내용은 주석으로 반드시 표기한다.

## 6. 시나리오 기반 설명  
- 대표적인 **도메인 시나리오(예: 주문 생성, 결제 승인 등)**를 시퀀스 다이어그램이나 흐름표로 작성한다.  
- BDD풍의 Given-When-Then 서술을 통해 시나리오별 기대 동작을 명시한다[1].

## 7. 변경 이력 및 의사결정 기록  
- 문서 하단에 **변경 이력(Change Log)**을 두어 주요 업데이트 일자와 변경 내용을 기록한다.  
- **의사결정 기록(Decision Record)** 섹션을 별도로 두어, 설계 선택 배경과 대안 검토 결과를 남긴다[1].

## 8. 문서의 지속적 관리  
- 개발 과정에서 **Just-in-time** 문서화를 권장하며, 코드·테스트·문서를 함께 업데이트하도록 CI 파이프라인에 문서 검증 단계를 추가한다[1].  
- 문서와 코드가 동기화되지 않은 경우 CI 실패로 처리한다.

## 9. 형식 및 가독성  
- 마크다운(Markdown) 형식 사용을 권장하며, **목차** 자동 생성 기능을 활용한다.  
- 코드 블록, 표, 다이어그램(ASCII 또는 Mermaid) 등을 통해 가독성을 높인다[4].
